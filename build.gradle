apply plugin: 'java'
apply plugin: 'idea'


group 'com.babbel.auto'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8


repositories {
    mavenCentral()
}


def versions = [cucumber : '4.8.1',
                selenium: '3.141.59',
                log4j2 : '2.12.1',
                snakeyml : '1.25',
                jackson : '2.10.2',
                appium : '7.3.0']

def cucumberArgs = ['--plugin', 'pretty',
                    '--plugin', 'json:report_output/cucumber.json',
                    '--monochrome',
                    '--tags', tags ]
File reportTest


dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'io.cucumber', name: 'cucumber-picocontainer', version: "${versions.cucumber}"
    testImplementation group: 'io.cucumber', name: 'cucumber-java8', version: "${versions.cucumber}"
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: "${versions.cucumber}"
    compile group: 'org.yaml', name: 'snakeyaml', version: "${versions.snakeyml}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${versions.log4j2}"
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: "${versions.selenium}"
    compile group: "com.fasterxml.jackson.dataformat", name: 'jackson-dataformat-xml', version: "${versions.jackson}"
    compile group: 'io.appium', name: 'java-client', version: "${versions.appium}"

}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

ext.getBDDArgs =  { ->
    def bddArgs = ""
    if (driver == 'web')
        bddArgs = [ '--glue', 'com.babbel.auto.web', "src/test/resources/features/web"]
    else if (driver == 'android' || driver == 'ios')
        bddArgs = ['--glue', 'com.babbel.auto.mobile', "src/test/resources/features/mobile"]

    return bddArgs
}

ext.setUpArgs = { ->
    tags = (tags as String).toLowerCase()
    driver = (driver as String).toLowerCase()
    browser = (browser as String).toLowerCase()
    server = (server as String).toLowerCase()
    platformName = (platformName as String).toLowerCase()

    // Save Args into properties file
    def file = new File(configPath)
    if (file.exists())
        file.delete()
    file.createNewFile()

    def propertyF = new Properties()
    OutputStream output = new FileOutputStream(configPath)

    propertyF.setProperty("TAGS", tags)
    propertyF.setProperty("SERVER", server)
    propertyF.setProperty("DRIVER", driver)

    if (driver == 'web')
        propertyF.setProperty("BROWSER", browser)

    propertyF.store(output, null)
    output.close()

    // Set up Cucumber Args
    cucumberArgs += getBDDArgs()
}

task setupEnv() {
    // Create Log directory if doesn't exist
    File reportLogs = new File("logs/") // log files
    if (!reportLogs.exists())
        reportLogs.mkdir()

    // Create report directory if doesn't exits
    reportTest = new File("report_output/") // report_json
    if (!reportTest.exists())
        reportTest.mkdir()
    else
        delete reportTest.listFiles()

    setUpArgs()
}

task cucumber(dependsOn:setupEnv) {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = cucumberArgs
        }
    }
}
